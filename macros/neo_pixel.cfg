##
## PINPLAYER
##
## GCode macro based non-blocking way to stream a sequence of outputs to a [neopixel] or an [output_pin],
## only once or repeating in an infinite loop until stopped.
##
## The key concept is in the ability to define a PLAYER for any neopixel or an output pin
## and configuring any number of TRACKs for it, which can then be requested to be played back.
##
## It is possible to control neopixels, regular LED strips connected to PWMable outputs and even beepers.
## Neopixel support is rudimentary, it is currently not possible to provide colors to individual LEDs in the chain.
##
## Configuration for each PLAYER consists of two sections:
##     * the configuration for the player itself and the tracks that it can play back
##         [gcode_macro _pinplayer_config__PLAYER_NAME_HERE]
##             ....
##             # track definition
##             variable_track__TRACK_NAME_HERE: [
##                     ....
##                 ]
##             ....
##
##     * the internally used delayed_gcode macro that will perform the playback
##       no configuration is here, but it needs to be named appropriately and call its corresponding player from inside of itself
##         [delayed_gcode _pinplayer_loop__PLAYER_NAME_HERE]
##         gcode:
##             _PINPLAYER_LOOP PLAYER=PLAYER_NAME_HERE
##
## NOTE: in the configuration blocks the player names and track names are specified after the double underscore ("__")
## Example:
##   in "_pinplayer_config__toolhead_logo", the player name is "toolhead_logo"
##   in "variable_track__print_start", the track name is "print_start"
## You are going to need to specify those to the macros that start and stop the playback.
##
## Color values for neopixels will be provided as (r,g,b) tuples, while for output pins the values are provided as (dutyCycle,cycleTime).
##
## Usage:
##     # to start the playback of a track from a player. setting LOOP to 1 will make it play the track indefinitely until stopped
##     PINPLAYER_START PLAYER=toolhead_logo TRACK=print_start LOOP=0
##     # to stop the playback of the current track by the player -or- to set the player to the "idle state"
##     PINPLAYER_STOP PLAYER=toolhead_logo
##
## Below are the commented out configuration examples for use with a neopixel, a regular LED strip connected to a heater output, and a beeper on the LCD.
## Uncomment the one you need and modify it for your needs.
## Lines starting with double or tripple hash tags ("##", "###") are comments and should not be uncommented.
## The original spacing of configuration values matters.
##
##
## @version 1.1
## @author VintageGriffin
##

## ----------------------------
## ----------------------------
## ----------------------------

###
### configuration for a "neopixel" pinplayer with the name "toolhead_logo"
###
[gcode_macro _pinplayer_config__my_neopixel]
### name of your [neopixel]
variable_pin_name: 'my_neopixel'
### (r,g,b) value for a neopixel color
### the player will return to this idle state after the playback ends or is stopped
variable_idle_state: (0.18, 0.31, 0.6)
###
### track definition
### contains a combination of values (same as in idle_state) and for how long to wait (in seconds) before switching to the next set
###
variable_track__print_start: [ # display red, green and blue with one second intervals in between
        [(0.5, 0, 0), 1],
        [(0, 0.5, 0), 1],
        [(0, 0, 0.5), 1],
    ]
variable_track__print_paused: [ # flash yellow on repeat (loop=1) while print is paused
        [(1, 1, 0), 1],
        [(0, 0, 0), 1],
    ]
### internal variables, do not edit
variable_track_name: ''
variable_track_pos: 0
variable_do_loop: 0
gcode:
    ### nothing, but the section needs to be declared

### each pinplayer needs to have its own [delayed_gcode] loop macro specified using the same
### player name as in the main configuration
[delayed_gcode _pinplayer_loop__my_neopixel]
gcode:
    #_PINPLAYER_LOOP PLAYER=toolhead_logo
    _PINPLAYER_LOOP PLAYER=my_neopixel


## ----------------------------
## ----------------------------
## ----------------------------



###
### configuration for an "output_pin" pinplayer with the name "caselight"
###
#[gcode_macro _pinplayer_config__caselight]
### name of your [output_pin]
#variable_pin_name: 'caselight'
### (dutyCycle,cycleTime) values for the output pin, or in other words (howBright,pwmSpeed)
### klipper's default cycleTime is "0.01" seconds
### the player will return to this idle state after the playback ends or is stopped
#variable_idle_state: (0.4, 0.01)
###
### track definition
### contains a combination of values (same as in idle_state) and for how long to wait (in seconds) before switching to the next set
###
#variable_track__fadein: [ # gently increase brightness instead of blasting at max power from the start
#        [(0.10, 0.01), 0.5],
#        [(0.12, 0.01), 0.5],
#        [(0.14, 0.01), 0.5],
#        [(0.16, 0.01), 0.5],
#        [(0.17, 0.01), 0.5],
#        [(0.20, 0.01), 0.5],
#        [(0.22, 0.01), 0.5],
#        [(0.24, 0.01), 0.5],
#        [(0.26, 0.01), 0.5],
#        [(0.30, 0.01), 0.5],
#        [(0.32, 0.01), 0.5],
#        [(0.34, 0.01), 0.5],
#        [(0.36, 0.01), 0.5],
#        [(0.38, 0.01), 0.5],
#        [(0.40, 0.01), 0.5],
#
#    ]
#variable_track__print_error: [ # flash a couple of times to draw attention
#        [(1, 0.01), 0.3],
#        [(0, 0.01), 0.3],
#        [(1, 0.01), 0.3],
#        [(0, 0.01), 0.3],
#        [(1, 0.01), 0.3],
#        [(0, 0.01), 0.3],
#        [(1, 0.01), 0.3],
#    ]
### internal variables, do not edit
#variable_track_name: ''
#variable_track_pos: 0
#variable_do_loop: 0
#gcode:
#    ### nothing, but the section needs to be declared

### each pinplayer needs to have its own [delayed_gcode] loop macro specified using the same
### player name as in the main configuration
#[delayed_gcode _pinplayer_loop__caselight]
#gcode:
#    _PINPLAYER_LOOP PLAYER=caselight



## ----------------------------
## ----------------------------
## ----------------------------



###
### configuration for an "output_pin" beeper pinplayer with the name "beeper"
###
#[gcode_macro _pinplayer_config__beeper]
### name of your [output_pin]
#variable_pin_name: 'beeper'
### (dutyCycle,cycleTime) values for the output pin, or in other words (howLoud,pitch)
### needs very low cycleTime values to make higher pitched noise (~0.001)
### klipper does software PWM and thousands of cycles per seconds might cause too much load. don't leave it running unnecessarily
### the player will return to this idle state after the playback ends or is stopped
#variable_idle_state: (0, 0.01)
###
### track definition
### contains a combination of values (same as in idle_state) and for how long to wait (in seconds) before switching to the next set
###
#variable_track__ramp: [     # just an example to show that higher pitched sounds require very low cycleTimes
#        [(0.9, 0.001), 1],
#        [(0.9, 0.002), 1],
#        [(0.9, 0.003), 1],
#        [(0.9, 0.004), 1],
#        [(0.1, 0.005), 1],
#        [(0.1, 0.006), 1],
#        [(0.1, 0.007), 1],
#        [(0.1, 0.008), 1],
#        [(0.1, 0.009), 1],
#    ]
#variable_track__alarm: [     # make ambulance like noise
#        [(0.9, 0.001), 0.5],
#        [(0.9, 0.007), 0.5],
#        [(0.9, 0.001), 0.5],
#        [(0.9, 0.007), 0.5],
#        [(0.9, 0.001), 0.5],
#        [(0.9, 0.007), 0.5],
#        [(0.9, 0.001), 0.5],
#        [(0.9, 0.007), 0.5],
#    ]
### internal variables, do not edit
#variable_track_name: ''
#variable_track_pos: 0
#variable_do_loop: 0
#gcode:
#    ### nothing, but the section needs to be declared

### each pinplayer needs to have its own [delayed_gcode] loop macro specified using the same
### player name as in the main configuration
#[delayed_gcode _pinplayer_loop__beeper]
#gcode:
#    _PINPLAYER_LOOP PLAYER=beeper




## ----------------------------
## ----------------------------
## ----------------------------



#
# Plays the requested TRACK from the specified PLAYER in a non-blocking way; either once or looping indefinitely until stopped
#
 #PINPLAYER_START PLAYER=toolhead_logo TRACK=print_start LOOP=0
# PINPLAYER_START PLAYER=my_neopixel TRACK=print_start LOOP=0
#
[gcode_macro PINPLAYER_START]
gcode:
    {% set player_name  = params.PLAYER|default('')|string %}
    {% set track_name   = params.TRACK|default('')|string %}
    {% set do_loop      = params.LOOP|default(0)|int %}
    {% set player_macro = '_pinplayer_config__%s' % player_name %}
    {% set loop_name    = '_pinplayer_loop__%s'   % player_name %}
    {% set cfg = printer['gcode_macro %s' % player_macro]|default(none) %}

    {% if cfg %}
        {% set notes = cfg['track__%s' % track_name]|default(none) %}
        {% if notes %}
            SET_GCODE_VARIABLE MACRO={player_macro} VARIABLE=track_name VALUE="'{track_name}'"
            SET_GCODE_VARIABLE MACRO={player_macro} VARIABLE=track_pos VALUE=0
            SET_GCODE_VARIABLE MACRO={player_macro} VARIABLE=do_loop VALUE={do_loop}
            UPDATE_DELAYED_GCODE ID={loop_name} DURATION=0.01
        {% else %}
            {action_respond_info('PINPLAYER_START %s' % rawparams)}
            {action_respond_info('TRACK name not provided or the configuration for it does not exist under "[gcode_macro %s] track__%s".' % (player_macro, track_name))}
        {% endif %}
    {% else %}
        {action_respond_info('PINPLAYER_START %s' % rawparams)}
        {action_respond_info('PLAYER name not provided or the configuration for it does not exist under "[gcode_macro %s]".' % player_macro)}
    {% endif %}


#
# Stops the playback of the current track on the given PLAYER.
#
#PINPLAYER_STOP PLAYER=my_neopixel
#
[gcode_macro PINPLAYER_STOP]
gcode:
    {% set player_name  = params.PLAYER|default('')|string %}
    {% set player_macro = '_pinplayer_config__%s' % player_name %}
    {% set loop_name    = '_pinplayer_loop__%s'   % player_name %}
    {% set cfg = printer['gcode_macro %s' % player_macro] %}

    {% if cfg %}
        SET_GCODE_VARIABLE MACRO={player_macro} VARIABLE=track_pos VALUE=9999

        {% if not cfg.track_name %} # not currently playing anything
            UPDATE_DELAYED_GCODE ID={loop_name} DURATION=0.01
        {% endif %}
    {% else %}
        {action_respond_info('PINPLAYER_STOP %s' % rawparams)}
        {action_respond_info('PLAYER name not specified or the configuration for it does not exist under "[gcode_macro %s]".' % player_macro)}
    {% endif %}


#
# Common code that all tracks being played execute.
#
[gcode_macro _PINPLAYER_LOOP]
gcode:
    {% set player_name  = params.PLAYER|default('')|string %}
    {% set player_macro = '_pinplayer_config__%s' % player_name %}
    {% set loop_name    = '_pinplayer_loop__%s'   % player_name %}
    {% set cfg   = printer['gcode_macro %s' % player_macro] %}
    {% set notes = cfg['track__%s' % cfg.track_name] if cfg.track_name else [] %}
    {% set loop_done = cfg.track_pos >= notes|length %}
    {% set data, duration = notes[cfg.track_pos] if not loop_done else (cfg.idle_state, 0) %}
    {% set next_pos = 0 if loop_done or (cfg.do_loop and cfg.track_pos == notes|length - 1) else cfg.track_pos + 1 %}

    {% if data|length == 3 %}
        ## uncomment the below line to see what's going on
        #{action_respond_info('SET_LED LED=%s RED=%.3f GREEN=%.3f BLUE=%.3f' % (cfg.pin_name, data[0], data[1], data[2]))}
        SET_LED LED={cfg.pin_name} {'RED=%.3f GREEN=%.3f BLUE=%.3f' % data}
    {% else %}
        ## uncomment the below line to see what's going on
        #{action_respond_info('SET_PIN PIN=%s VALUE=%.3f CYCLE_TIME=%.3f' % (cfg.pin_name, data[0], data[1]))}
        SET_PIN PIN={cfg.pin_name} {'VALUE=%.3f CYCLE_TIME=%.3f' % data}
    {% endif %}

    SET_GCODE_VARIABLE MACRO={player_macro} VARIABLE=track_pos VALUE={next_pos}
    UPDATE_DELAYED_GCODE ID={loop_name} DURATION={duration}

    {% if loop_done %} # clean up
        SET_GCODE_VARIABLE MACRO={player_macro} VARIABLE=track_name VALUE="''"
        SET_GCODE_VARIABLE MACRO={player_macro} VARIABLE=do_loop VALUE=0
    {% endif %}



